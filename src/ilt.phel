(ns phel-scaffolding\web\views\main
  (:require phel\html :refer [html doctype])
  (:require phel\http))

# Utils

(defn partialr [f & args1]
  "partial right"
  (fn [& args2]
    (apply f (concat args2 args1))))

# ((partialr str "lala") "foo")

(defn- clean-doc [str]
  (php/trim (php/str_replace (php/array "```phel\n" "```") "" str)))

## JSON

(defn- valid-key? [v]
  (or (int? v) (float? v) (symbol? v) (keyword? v) (string? v)))

(defn- json-encode-value [x]
  (cond
    (php/is_iterable x)
    (let [arr (php/array)]
      (foreach [k v x]
               (when-not (valid-key? k)
                 (throw (php/new \Exception "Key can only be an integer, float, symbol, keyword or a string.")))
               (php/aset arr (json-encode-value k) (json-encode-value v)))
      arr)
    (symbol? x) (str (php/-> x (getName)))
    (keyword? x) (str (php/-> x (getName)))
    (float? x) (str x)
    true x))

(defn json-encode [value & [{:flags flags :depth depth}]]
  (let [flags (or flags 0)
        depth (or depth 512)]
    (when (php/is_resource value) (throw (php/new \Exception "Value can be any type except a resource.")))
    (when-not (int? flags) (throw (php/new \Exception "Flags must be an integer.")))
    (when-not (int? depth) (throw (php/new \Exception "Depth must be an integer.")))
    (when-not (> depth 0) (throw (php/new \Exception "Depth must be greater than zero.")))
    (php/json_encode (json-encode-value value) flags depth)))

(defn- json-decode-value [x]
  (cond
    (indexed? x)
    (for [v :in x] (json-decode-value v))

    (php-array? x)
    (let [hashmap (transient {})]
      (foreach [k v x]
               (put hashmap (keyword k) (json-decode-value v)))
      (persistent hashmap))

    true x))

(defn- jsonrpc-error [operation error-msg]
  (print (json-encode
          {:jsonrpc "2.0"
           :id (get operation :id)
           :error {:code -32000
                   :message error-msg}})))

(defn- jsonrpc-result [operation result]
  (print (json-encode
          {:jsonrpc "2.0"
           :id (get operation :id)
           :result result})))

## Phel utils

(defn read-php-obj-prop [obj prop]
  (let [r (php/new \ReflectionObject obj)
        p (php/-> r (getProperty prop))]
    (php/-> p (setAccessible true))
    (php/-> p (getValue obj))))

# Hack to access Phel registry private definitions data
(defn registry-definitions []
  (read-php-obj-prop (php/:: \Phel\Lang\Registry (getInstance))
                     "definitions"))

(defn namespaces-list []
  (php/array_keys (registry-definitions)))

# (namespaces-list)

(defn namespace-definitions [namespace]
  (-> (registry-definitions)
      (php/aget namespace)
      (php/array_keys)))

# (count (namespace-definitions "phel\core"))
# (count (->> (registry-definitions) (php/array_values) (mapcat php/array_keys)))

(defn- ilt-kind-of [type]
  type)

## JSONRPC protocol

(defn- php-func-args [fname]
  (->>
   (php/-> (php/new \ReflectionFunction fname) (getParameters))
   (map (fn [param] {:name (php/-> param (getName))
                     :type (php/-> param (getType))}))))

# (php-func-args "array_merge")

(defn get-def-meta-data [namespace name]
  (let [registry (php/:: \Phel\Lang\Registry (getInstance))]
    (php/-> registry (getDefinitionMetaData "phel\core" name))))

(defn make-definition [name type kind]
  (let [def {:id name
             :name name
             :module "TODO"
             :type type
             :kind kind}]
    (case kind
      "function"
      (cond
        # php func
       (php/function_exists name)
       (-> def
           (put :args (php-func-args name)))

       # phel fun
       (get-def-meta-data "phel\core" name)
       (let [doc (-> (get-def-meta-data "phel\core" name)
                     (get :doc)
                     (clean-doc))
             args-and-doc (apply vector (php/explode "\n" doc))]
         (-> def
             (put :args (get args-and-doc 0))
             (put :doc (php/implode "\n" (to-php-array (rest args-and-doc ))))))
       # default
       def)
      def)))

# (make-definition "array_merge" "function" "function")
# (make-definition "str" "function" "function")

# Functions used for generating tables for completions

(defn all-phel-def-names []
  (->> (registry-definitions)
       (php/array_values)
       (mapcat php/array_keys)))

# (all-phel-def-names)

(defn all-php-def-names []
  (let [functions (php/get_defined_functions)
        internal-functions (get functions "internal")
        user-functions (get functions "external")]
    (map str (concat internal-functions user-functions))))

# (all-php-def-names)

(defn- complete [what]
  (cond
    # If the thing to complete starts with php/, then return php completions.
   (php/str_starts_with what "php/")
   (let [what-to-complete (php/substr what 4)]
     (let [functions (php/get_defined_functions)
           internal-functions (get functions "internal")
           user-functions (get functions "external")]
       (map (partial str "php/")
            (filter (partialr php/str_starts_with what-to-complete)
                    (concat internal-functions user-functions)))))

   # Complete with Phel
   (->> (all-phel-def-names)
        (filter (partialr php/str_starts_with what)))))

# (complete "php/te")
# (complete "php/preg")
# (complete "php/str")
# (complete "pr")

# (compile '(defn foo [x] x))

(defn- apropos [what]
  (let [phel-defs (all-phel-def-names)
        matching-phel-defs (filter (partialr php/str_contains what) phel-defs)
        php-defs (php/get_defined_functions)
        php-defs (concat (php/aget php-defs "user")
                         (php/aget php-defs "internal"))
        matching-php-defs (filter (partialr php/str_contains what)
                                  php-defs)]
    (concat
     (map (partialr make-definition "function" "function")
          matching-phel-defs)
     (map (fn [def] (-> (make-definition def "function" "function")
                        (put :name (str "php/" def))))
          matching-php-defs))))

# (apropos "array")

(defn- definition-properties [id properties]
  (cond
    # php defs
   (php/str_starts_with id "php/")
   (let [php-name (php/substr id 4)]
     (if (php/function_exists php-name)
       (make-definition php-name "function" "function")
       {}))

   # phel defs
   (some? (partial = id) (all-phel-def-names))
   (make-definition id "function" "function")

   #default
   {}))

# (definition-properties "str" [])

(defn- find-functions [name]
  (cond
    # php defs
   (php/str_starts_with name "php/")
   (let [php-name (php/substr name 4)]
     (if (php/function_exists php-name)
       [(make-definition php-name "function" "function")]
       []))

   # phel defs
   (some? (partial = name) (all-phel-def-names))
   [(make-definition name "function" "function")]

   # otherwise
   []))

# (find-functions "php/array_merge")
# (find-functions "str")
# (find-functions "lala")

(defn- find-variables [name]
  [])

(defn- find-definitions [name type]
  (concat
   (if (or (not type)
           (= type "function"))
     (find-functions name)
     [])
   (if (or (not type)
           (= type "variable"))
     (find-variables name)
     [])))

# (find-definitions "php/array_merge" "function")
# (find-definitions "php/array_merges" "function")
# (find-definitions "lala" "function")
# (find-definitions "php/array_merge" nil)
# (find-definitions "str" nil)

(defn handle-request []
  (let [request (http/request-from-globals)
        uri (get request :uri)]
    (when (and (= (get request :method) "POST")
               (= (get uri :path) "/ilt"))
      (let [operation (json-decode-value (php/json_decode (php/file_get_contents "php://input") true))]
        (case (get operation :method)
          "evaluate"
          (let [expr (first (get operation :params))]
            (try
              (let [res (eval (read-string expr))]
                (jsonrpc-result operation
                                {:type (type res)
                                 :repr (print-str res)
                                 :kind (ilt-kind-of (type res))}
                                ))
              (catch \Exception e
                (jsonrpc-error operation (php/-> e (getMessage))))))

          "compile"
          (let [expr (first (get operation :params))]
            (try
              (let [res (compile (read-string expr))]
                (jsonrpc-result operation res))
              (catch \Exception e
                (jsonrpc-error operation (php/-> e (getMessage))))))

          "complete"
          (let [what (first (get operation :params))]
            (jsonrpc-result operation (complete what)))

          "get_definition_properties"
          (let [def (first (get operation :params))
                props (second (get operation :params))]
            (jsonrpc-result operation (definition-properties def props)))

          "apropos"
          (let [what (first (get operation :params))]
            (jsonrpc-result operation (apropos what)))

          "find_definitions"
          (let [name (get (get operation :params) 0)
                module (get (get operation :params) 1)
                type (get (get operation :params) 2)]
            (jsonrpc-result operation (find-definitions name type)))

          true
          (print "Error: invalid operation"))

        # We handled the ILT jsonrpc request. Quit now.
        (php/exit 0)
        ))))

## Handle requests

(handle-request)

## Test
# (get [] 3)
# (+ 2 2)

# (php/str_starts_with "this is a test" "this")
# (php/str_starts_with "this is a test" "that")

# (lalal)

# (http/request-from-globals)

# (php/json_encode 22)

# (php/function_exists "count")
# (php/-> (php/new \ReflectionFunction "count") (getParameters))
# (php/-> (php/new \ReflectionFunction "count") (getDocComment))

# (php/-> (php/new \ReflectionFunction "array_merge") (getParameters))
# (php/-> (php/new \ReflectionFunction "array_merge") (getDocComment))
# (php/-> (php/new \ReflectionFunction "array_merge") (getName))
# (php/-> (php/new \ReflectionFunction "array_merge") (getNamespaceName))
# (php/-> (php/new \ReflectionFunction "array_merge") (getReturnType))
# (php/-> (php/new \ReflectionFunction "array_merge") (getFilename))

# (php/get_class_methods "Symfony\Component\String\AbstractString")
